#!/usr/bin/env node
// Check for NODE_ENV environment variable if existing. If it exists,
// there's a high chance the app is hosted in Heroku. If it doesnt, load .env variables
if(!process.env.NODE_ENV || process.env.NODE_ENV !== "development") {
  console.log("NODE_ENV is null, the current configuration is development. Reading configuration from .env...")
  require('dotenv').config()
}

/**
 * Module dependencies.
 */

const {app, startSocket} = require('../app');
const debug = require('debug')('usada-kensetsu:server');
const fs = require('fs');
const https = require('https');
const http = require('http');
const socketIo = require("socket.io");

// NOTE: These are Self-signed certificates. This is for development purposes only
const privateKey  = fs.readFileSync('ssl/41300864_localhost.key', 'utf8');
const certificate = fs.readFileSync('ssl/41300864_localhost.cert', 'utf8');

const credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 * If production environment, http server is to be loaded
 * Else, need to inject Self signed certificate to enable local testing
 */

let server;
if(process.env.NODE_ENV === "production" || process.env.NODE_ENV === "staging") {
  server = http.createServer(app);
} else {
  server = https.createServer(credentials, app);
}


const io = socketIo(server, {
  cors: {
    origin: process.env.CLIENT_URL,
    methods: ["GET", "POST"]
  }
});

startSocket(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
